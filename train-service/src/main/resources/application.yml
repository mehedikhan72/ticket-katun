spring:
  application:
    name: train-service
  datasource:
    url: jdbc:postgresql://postgres:5432/ticket-katun
    username: postgres
    password: postgres

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: broker:9092
    template:
      default-topic: ticket-booked
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema:
          registry:
            url: http://schema-registry:8085

server:
  port: 8080

# reservation:
#   url: http://localhost:8081

## Observability
#management:
#  endpoints:
#    web:
#      exposure:
#        include: health, info, metrics, prometheus
#  metrics:
#    distribution:
#      percentiles-histogram:
#        http:
#          server:
#            requests: true
#  observations:
#    key-values:
#      application: train-service
#  tracing:
#    sampling:
#      probability: 1.0
#  endpoint:
#    health:
#      show-details: always
#  health:
#    circuitbreakers:
#      enabled: true
#
#loki:
#  url: http://loki:3100/loki/api/v1/push
#
#
## Resilience4j
#resilience4j:
#  circuitbreaker:
#    instances:
#      inventory:
#        registerHealthIndicator: true
#        event-consumer-buffer-size: 10
#        slidingWindowType: COUNT_BASED
#        slidingWindowSize: 5
#        failureRateThreshold: 50
#        waitDurationInOpenState: 5s
#        permittedNumberOfCallsInHalfOpenState: 3
#        automaticTransitionFromOpenToHalfOpenEnabled: true
#        minimum-number-of-calls: 5
#
#  timelimiter:
#    instances:
#      inventory:
#        timeout-duration: 3s
#
#  retry:
#    instances:
#      inventory:
#        max-attempts: 3
#        wait-duration: 5s
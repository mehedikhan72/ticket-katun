version: '3.8'

services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "9000:9000"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki

  train-service:
    build: ./train-service
    ports:
      - "8080:8080"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki
      - postgres

  reservation-service:
    build: ./reservation-service
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki

  payment-service:
    build: ./payment-service
    ports:
      - "8082:8082"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki

  otp-service:
    build: ./otp-service
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki

  notification-service:
    build: ./notification-service
    ports:
      - "8084:8084"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki

  worker-service:
    build: ./worker-service
    ports:
      - "8087:8087"
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-ui
      - keycloak
      - keycloak-mysql
      - grafana
      - tempo
      - prometheus
      - loki
      - postgres

  redis-service:
    build: ./redis-service
    ports:
      - "8088:8088"
    depends_on:
      - redis

  postgres:
    image: postgres:latest
    container_name: postgress_db
    restart: always
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8085"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
  loki:
    image: grafana/loki:main
    command: [ '-config.file=/etc/loki/local-config.yaml' ]
    ports:
      - '3100:3100'

  prometheus:
    image: prom/prometheus:v2.46.0
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - '9090:9090'

  tempo:
    image: grafana/tempo:2.2.2
    command: [ '-config.file=/etc/tempo.yml' ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - '3110:3100' # Tempo
      - '9411:9411' # zipkin

  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - '3000:3000'

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PORT=6379

volumes:
  postgres_data: